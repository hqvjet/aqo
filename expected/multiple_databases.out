-- Tests on cross-databases interference.
create extension aqo;
set aqo.join_threshold = 0;
set aqo.show_details = on;
set aqo.mode = learn;
set aqo.use = on;
select * from aqo_reset(NULL);
 aqo_reset 
-----------
        12
(1 row)

CREATE DATABASE aqo_crossdb_test;
-- Save current database and port.
SELECT current_database() AS old_db \gset
SELECT oid AS old_dbid FROM pg_database WHERE datname = current_database() \gset
SELECT setting AS old_port FROM pg_settings WHERE name = 'port' \gset
CREATE TABLE a (x1 int, x2 int, x3 int);
INSERT INTO a (x1, x2, x3) SELECT mod(ival,10), mod(ival,10), mod(ival,10) FROM generate_series(1,100) As ival;
CREATE TABLE b (y1 int, y2 int, y3 int);
INSERT INTO b (y1, y2, y3) SELECT mod(ival + 1,10), mod(ival + 1,10), mod(ival + 1,10) FROM generate_series(1,1000) As ival;
--
-- Returns string-by-string explain of a query. Made for removing some strings
-- from the explain output.
--
CREATE OR REPLACE FUNCTION expln(query_string text) RETURNS SETOF text AS $$
BEGIN
    RETURN QUERY
        EXECUTE format('EXPLAIN (ANALYZE, VERBOSE, COSTS OFF, TIMING OFF, SUMMARY OFF) %s', query_string);
    RETURN;
END;
$$ LANGUAGE PLPGSQL;
SELECT str AS result
FROM expln('
SELECT x1,y1 FROM A LEFT JOIN b ON A.x1 = B.y1 WHERE x1 = 5 AND x2 = 5;') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                        result                         
-------------------------------------------------------
 Nested Loop Left Join (actual rows=1000 loops=1)
   AQO not used
   Output: a.x1, b.y1
   Join Filter: (a.x1 = b.y1)
   ->  Seq Scan on public.a (actual rows=10 loops=1)
         AQO not used
         Output: a.x1, a.x2, a.x3
         Filter: ((a.x1 = 5) AND (a.x2 = 5))
         Rows Removed by Filter: 90
   ->  Seq Scan on public.b (actual rows=100 loops=10)
         AQO not used
         Output: b.y1, b.y2, b.y3
         Filter: (b.y1 = 5)
         Rows Removed by Filter: 900
 Using aqo: true
 AQO use: ON
 AQO mode: LEARN
 JOINS: 1
(18 rows)

SELECT count(*) FROM aqo_data();
 count 
-------
     3
(1 row)

SELECT count(*) FROM aqo_queries();
 count 
-------
     1
(1 row)

SELECT count(*) FROM aqo_query_texts();
 count 
-------
     1
(1 row)

SELECT count(*) FROM aqo_query_stat();
 count 
-------
     4
(1 row)

-- Connect to other DB
\c aqo_crossdb_test - - :old_port
create extension aqo;
set aqo.join_threshold = 0;
set aqo.show_details = on;
set aqo.mode = learn;
set aqo.use = on;
CREATE TABLE a (x1 int, x2 int, x3 int);
INSERT INTO a (x1, x2, x3) SELECT mod(ival,10), mod(ival,10), mod(ival,10) FROM generate_series(1,100) As ival;
CREATE OR REPLACE FUNCTION expln(query_string text) RETURNS SETOF text AS $$
BEGIN
    RETURN QUERY
        EXECUTE format('EXPLAIN (ANALYZE, VERBOSE, COSTS OFF, TIMING OFF, SUMMARY OFF) %s', query_string);
    RETURN;
END;
$$ LANGUAGE PLPGSQL;
SELECT str AS result
FROM expln('
SELECT * FROM a WHERE x1 > 1;') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                    result                     
-----------------------------------------------
 Seq Scan on public.a (actual rows=80 loops=1)
   AQO not used
   Output: x1, x2, x3
   Filter: (a.x1 > 1)
   Rows Removed by Filter: 20
 Using aqo: true
 AQO use: ON
 AQO mode: LEARN
 JOINS: 0
(9 rows)

SELECT count(*) FROM aqo_data();
 count 
-------
     4
(1 row)

SELECT count(*) FROM aqo_queries();
 count 
-------
     1
(1 row)

SELECT count(*) FROM aqo_query_texts();
 count 
-------
     1
(1 row)

SELECT count(*) FROM aqo_query_stat();
 count 
-------
     6
(1 row)

-- Remove aqo info from other DB.
SELECT aqo_reset(:old_dbid);
 aqo_reset 
-----------
         7
(1 row)

-- Reconnect to old DB.
\c :old_db - - :old_port
SELECT count(*) FROM aqo_data();
 count 
-------
     1
(1 row)

SELECT count(*) FROM aqo_queries();
 count 
-------
     1
(1 row)

SELECT count(*) FROM aqo_query_texts();
 count 
-------
     1
(1 row)

SELECT count(*) FROM aqo_query_stat();
 count 
-------
     2
(1 row)

SELECT aqo_reset(NULL);
 aqo_reset 
-----------
         3
(1 row)

DROP DATABASE aqo_crossdb_test;
DROP EXTENSION aqo;
